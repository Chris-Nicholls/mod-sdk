@prefix lv2: <http://lv2plug.in/ns/lv2core#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix mod: <http://portalmod.com/ns/modgui#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .

<http://portalmod.com/ns/modgui>
	a lv2:Specification ;
	lv2:documentation """
<p>This extension defines a standard for generating web-based interfaces for
plugins. The goal of this interface is to allow, in a web-based environment,
an interface in which each plugin will have a representation, designed to look
like a real device, and they'll be connected to each other by cables, to make
pedalboards. Plugins implementing this standard will be compatible with the MOD device
and MOD host software.</p>

<p>In this interface, each plugin has:</p>
<ul>
  <li>A pedal-like design;</li>
  <li>A footswitch that will bypass it;</li>
  <li>A light indicating the bypass state;</li>
  <li>Buttons that will control some most important parameters;</li>
  <li>Inputs and outputs in which cables will be connected;</li>
  <li>A clickable area to drag the pedal around.</li>
</ul>

<p>To provide the interface, the following resources can be used:</p>
<ul>
  <li>An HTML file defining the layout;</li>
  <li>A directory with static media that will be served to browser to build the
    interface;</li>
  <li>Special markup is used inside the HTML to define element's roles and
    funcionality;</li>
  <li>A screenshot and thumbnail of the plugin interface.</li>
</ul>

<p>To help the creation of interfaces, several base layouts have been
created. A set of backgrounds, knobs and slider images are available for
the plugin without the need of packing it inside the bundle. Any host that
implements this model should provide those resources. They're available in the
MOD SDK, that provides tools for building plugin interfaces.</p>
""" .

mod:Icon
	a rdfs:Class ;
	rdfs:label "Icon" ;
	lv2:documentation """
        <p>The layout definition of the icon of this plugin.</p>
        """ .

mod:template
	a rdf:Property ;
	rdfs:range owl:Thing ;
	rdfs:label "template" ;
	rdfs:seeAlso <http://mustache.github.io/> ;
	lv2:documentation """
<p>A template that will be used to render the HTML icon of this plugin. The
value of this property must be a URI that resolves to a Mustache template.</p>

<h3>General guidelines</h3>

<p>To build the interface, follow these guidelines:</p>
<ul>
  <li>Start with a basic HTML template and use the MOD SDK to test it. Feel free to link any resource available in the SDK without packing them in the Bundle. Any host implementing this extension MUST provide those resources.</li>
  <li>Use the {{ns}} tag inside the template to access images and media inside the bundle. More explanation on this at mod:templateData.</li>
  <li>If you need new styles, always prefix them with the name of your bundle (the .lv2 extension is not necessary). In HTML all css classes are global, so this is necessary to avoid messing with the general interface.</li>
  <li>Use the <em>mod-role</em> attribute to mark elements that are functional for the plugin (see below).</li>
</ul>

<h3>Funcionality</h3>

<p>Some elements in your layout are just informative for the user, like the effect name, branding and background img. Others are functional, like the knobs and footswitch. A functional element is marked as so by the "mod-role" attribute, and other mod-* attributes may be used as parameters. The following functional elements may be indicated:</p>

<h4>Bypass</h4>
<p>MOD compatible hosts MUST implement a bypass in each plugin loaded. Two elements are responsible for this, the bypass footswitch and bypass light indicator.</p>

<p>The footswitch is an element identified by the mod-role="<em>bypass</em>" attribute. Once clicked, the effect bypass will be turned on or off, and the light indicator will be changed as so.</p>

<p>The light indicator is identified by mod-role="<em>bypass-light</em>". It will automatically receive the class <em>on</em> or <em>off</em>, so designers are expected to implement a background image for each of these classes, or equivalent.</p>

<h4>Control buttons</h4>
<p>Each plugin can have buttons to control plugin's parameters. Each button is identified by the attribute mod-role="<em>input-control-port</em>" and configured by <em>mod-port-symbol</em> attribute, which must hold the port's symbol.</p>

<p>This element is expected to have a background-image style, with one big horizontal <a href="http://www.w3schools.com/css/css_image_sprites.asp">sprite</a> as background. User will be able to change that parameter by clicking on the control button and dragging the mouse up or down. As this is done, the background image will be moved to reflect the new state.</p>

<p>The minimum value of that port will be represented by the first position of the sprite and the maximum value by the last one. The number of steps will be calculated by dividing the background width by the element's width, considering the background-size style. The actual number of steps will be the minimum between the number of images in sprite and the steps limited by lv2 definition (by <a href="http://lv2plug.in/ns/ext/port-props/#rangeSteps">rangeSteps</a>, <a href="http://lv2plug.in/ns/lv2core/#enumeration">enumeration</a> or <a href="http://lv2plug.in/ns/lv2core/#toggled">toggled</a>.</p>

<p>For example, suppose you want to build a horizontal slider that can hold 10 different positions occupies an area of 150x30 pixels, to control the drive parameter of your plugin. For that, you could:</p>
<ul>
  <li>Design an image of 1500x30 pixels, each piece of 150x30 representing one position of the slider;</li>
  <li>Save it inside the mod:resourcesDirectory directory, in your bundle, as slider.png</li>
  <li>Put the following code into your HTML: &lt;div mod-role="input-control-port" mod-port-symbol="drive" style="width: 150px; height: 30px; background-image: url(/resources/slider.png{{ns}}"&gt;</li>
  <li>Suppose you wanted to use the same sprite for a half sized version of the slider, you could instead use the style "width: 75px; height: 15px; background-image: url(/resources/slider.png{{ns}}; background-size: auto 15px;"</li>
</ul>

<h4>Audio ports</h4>
<p>Each plugin has audio input and output ports. They are identified by mod-role="<em>input-control-port</em>" and mod-role="<em>output-control-port</em>" attributes respectively, and both must have a mod-port-symbol property containing the port symbol.</p>

<p>For implementing the connections, each output will receive a &lt;div&gt; element inside, representing a jack (this will be automatically inserted). This jack can be dragged by user and dropped inside an input, and so a connection will be made.</p>

<h4>Drag handle</h4>
<p>Plugins can be dragged around the pedalboard dashboard. To define which area of the plugin can be clicked for dragging, an element with the attribute mod-role="<em>drag-handle</em>" can be defined.</p>
""" .

mod:templateData
	a rdf:Property ;
	rdf:range owl:Thing ;
	rdf:label "template data" ;
	lv2:documentation """
<p>The data that will be used to render the template defined in mod:template.
The value of this property must be a URI that resolves to a json serialized
object and its data can be inspected using the SDK's debug interface.</p>

<p>This parameter isn't strictly necessary to build a plugin layout, as the
template can hold the final HTML file, but it's very useful to allow developers
to customize layout using templates provided by the SDK, instead of editing
HTML files.</p>

<p>The data in this file must be a dictionary. Three keys have an special treatment: 
<em>effect, <em>controls</em> and <em>ns</em>.</p>

<h3>effect</h3>
<p>This will be automatically assigned and will hold the effect's data parsed from ttl files. The effect data format is an arbitrary structure that organizes the rdf triples in a simple way. To see that structure, use the SDK's debugging interface</p>

<h3>controls</h3>
<p>This is expected to hold a list of control ports that will have a knob quickly
available at the pedal interface. Each control port should be a dictionary containing
at least a symbol and name. But since writing a list of dictionary is boring, you can
simply use a string with the control port symbols instead of the whole dictionary, and
then the parser will substitute this by a dictionary obtained from the effect ttl. If
you would like to change the displayed name of some control (for example, because the
full name is too big for the pedal), you can use a complete dictionary.</p>

<p>For example, if you have:</p>
<pre>
{
    "controls": [
        "level", 
        "tone", 
        "drive"
    ]
}
</pre>
<p>The data that will actually be available for the template would be something like:</p>
<pre>
{
    "controls": [
        { 
           "symbol": "level", 
           "name": "Level",
           "index": 0,
           "default": 1,
           "minimum": 0,
           // here follows several control input properties declared
        }, {
           "symbol": "tone",
           "name": "Tone",
           // you get the idea
        }
    ]
}
</pre>
<p>If you want to customize one displayed name, for example, you can do something like:</p>
<pre>
{
    "controls": [
        "level",
        { "symbol": "level", "name": "The Level" },
        "drive"
    ]
}
</pre>

<h3>ns</h3>
<p>All static files in folder defined by mod:resourcesDirectory will be available to the
interface, in path /resources of the webserver. To know where to look, the webserver
needs a ?bundle=BUNDLE&url=EFFECT_URL parameter.</p>

<p>To make this job easier, the <em>ns</em> variable will hold the correct url parameter,
so if you want to customize your template (say, have your brand image in the pedal),
you can refer to it like this:
&lt;img alt="Brand image example" src="/resources/brand.png{{ns}}"/&gt;</p>

<p>In the example above, the brand.png file inside the mod:resourcesDirectory would be
served</p>
""" .

mod:resourcesDirectory
	a rdf:Property ;
	rdf:range owl:Thing ;
	rdf:label "resources directory" ;
	lv2:documentation """
<p>This is a URI that resolves to a directory inside the bundle. Any file inside this
directory will be statically served to browser, and will be available at the /resources
path.</p>

<p>For the webserver to properly identify where to look, any request for media inside
this directory must have an ?url=EFFECT_URL parameter</p>         
""" .

mod:screenshot
	a rdf:Property ;
	rdf:range owl:Thing ;
	rdf:label "screenshot" ;
	lv2:documentation """
<p>An image with a real size screenshot of the rendered plugin interface.
The value of this property must be a URI that resolves to an image.</p>
""" .

mod:thumbnail
	a rdf:Property ;
	rdf:range owl:Thing ;
	rdf:label "screenshot" ;
	lv2:documentation """
<p>An image with a small representation of the rendered plugin interface.
The value of this property must be a URI that resolves to an image with maximum
size of 64x64px.
</p>
""" .
